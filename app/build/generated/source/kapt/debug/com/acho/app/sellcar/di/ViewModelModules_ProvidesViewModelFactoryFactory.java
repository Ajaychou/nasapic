// Generated by Dagger (https://dagger.dev).
package com.acho.app.sellcar.di;

import androidx.lifecycle.ViewModel;
import com.gs.nasaphotooftheday.home.di.ViewModelFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ViewModelModules_ProvidesViewModelFactoryFactory implements Factory<ViewModelFactory> {
  private final ViewModelModules module;

  private final Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> viewModelsProvider;

  public ViewModelModules_ProvidesViewModelFactoryFactory(ViewModelModules module,
      Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> viewModelsProvider) {
    this.module = module;
    this.viewModelsProvider = viewModelsProvider;
  }

  @Override
  public ViewModelFactory get() {
    return providesViewModelFactory(module, viewModelsProvider.get());
  }

  public static ViewModelModules_ProvidesViewModelFactoryFactory create(ViewModelModules module,
      Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> viewModelsProvider) {
    return new ViewModelModules_ProvidesViewModelFactoryFactory(module, viewModelsProvider);
  }

  public static ViewModelFactory providesViewModelFactory(ViewModelModules instance,
      Map<Class<? extends ViewModel>, Provider<ViewModel>> viewModels) {
    return Preconditions.checkNotNullFromProvides(instance.providesViewModelFactory(viewModels));
  }
}
