// Generated by Dagger (https://dagger.dev).
package com.gs.nasaphotooftheday;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentActivity;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.acho.app.sellcar.di.ViewModelModules;
import com.acho.app.sellcar.di.ViewModelModules_ProvidesFragmentFavoritesImagesViewModelFactory;
import com.acho.app.sellcar.di.ViewModelModules_ProvidesSelectYourCarBrandViewModelFactory;
import com.acho.app.sellcar.di.ViewModelModules_ProvidesViewModelFactoryFactory;
import com.acho.app.sellcar.repository.GetImageRepository;
import com.google.gson.Gson;
import com.gs.nasaphotooftheday.home.MainActivity;
import com.gs.nasaphotooftheday.home.MainActivity_MembersInjector;
import com.gs.nasaphotooftheday.home.di.ViewModelFactory;
import com.gs.nasaphotooftheday.home.fragments.NasaImageDetailFragment;
import com.gs.nasaphotooftheday.home.fragments.NasaImageDetailFragment_MembersInjector;
import com.gs.nasaphotooftheday.home.fragments.NasaImageListingFragment;
import com.gs.nasaphotooftheday.home.fragments.NasaImageListingFragment_MembersInjector;
import com.gs.nasaphotooftheday.home.navigator.AppNavigatorImpl;
import com.gs.nasaphotooftheday.home.repository.NasaImagesFavoriteRepo;
import com.gs.nasaphotooftheday.home.repository.Repository;
import com.gs.nasaphotooftheday.home.room.CacheMapper;
import com.gs.nasaphotooftheday.home.room.CacheMapperFavorites;
import com.gs.nasaphotooftheday.home.room.NasaImageDao;
import com.gs.nasaphotooftheday.home.room.NasaImageDatabase;
import com.gs.nasaphotooftheday.home.room.NasaImageRoomModule;
import com.gs.nasaphotooftheday.home.room.NasaImageRoomModule_ProvidesNasaImageDBFactory;
import com.gs.nasaphotooftheday.home.room.NasaImageRoomModule_ProvidesRoomNameDaoFactory;
import com.gs.nasaphotooftheday.home.room.RetrofitModule;
import com.gs.nasaphotooftheday.home.room.RetrofitModule_ProvideGsonBuilderFactory;
import com.gs.nasaphotooftheday.home.room.RetrofitModule_ProvidesCarsNameLogoServiceFactory;
import com.gs.nasaphotooftheday.home.room.RetrofitModule_ProvidesRetrofitFactory;
import com.gs.nasaphotooftheday.home.util.NetworkMapper;
import com.gs.nasaphotooftheday.home.viewmodels.FragmentFavoritesImagesViewModel;
import com.gs.nasaphotooftheday.home.viewmodels.FragmentNasaImageOfTheDayViewModel;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ActivityModule_ProvideFragmentActivityFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC extends NasaPhotoOfTheDayApp_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final ViewModelModules viewModelModules;

  private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC = this;

  private Provider<NasaImageDatabase> providesNasaImageDBProvider;

  private Provider<NasaImageDao> providesRoomNameDaoProvider;

  private Provider<Gson> provideGsonBuilderProvider;

  private Provider<Retrofit.Builder> providesRetrofitProvider;

  private Provider<Repository> providesCarsNameLogoServiceProvider;

  private Provider<ViewModel> providesSelectYourCarBrandViewModelProvider;

  private Provider<ViewModel> providesFragmentFavoritesImagesViewModelProvider;

  private DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam,
      ViewModelModules viewModelModulesParam) {
    this.applicationContextModule = applicationContextModuleParam;
    this.viewModelModules = viewModelModulesParam;
    initialize(applicationContextModuleParam, viewModelModulesParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private NasaImageDatabase nasaImageDatabase() {
    return NasaImageRoomModule_ProvidesNasaImageDBFactory.providesNasaImageDB(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private NasaImageDao nasaImageDao() {
    return NasaImageRoomModule_ProvidesRoomNameDaoFactory.providesRoomNameDao(providesNasaImageDBProvider.get());
  }

  private Retrofit.Builder retrofitBuilder() {
    return RetrofitModule_ProvidesRetrofitFactory.providesRetrofit(provideGsonBuilderProvider.get());
  }

  private Repository repository() {
    return RetrofitModule_ProvidesCarsNameLogoServiceFactory.providesCarsNameLogoService(providesRetrofitProvider.get());
  }

  private GetImageRepository getImageRepository() {
    return new GetImageRepository(providesRoomNameDaoProvider.get(), providesCarsNameLogoServiceProvider.get(), new CacheMapper(), new NetworkMapper());
  }

  private NasaImagesFavoriteRepo nasaImagesFavoriteRepo() {
    return new NasaImagesFavoriteRepo(providesRoomNameDaoProvider.get(), new CacheMapperFavorites());
  }

  private ViewModel providesSelectYourCarBrandViewModel() {
    return ViewModelModules_ProvidesSelectYourCarBrandViewModelFactory.providesSelectYourCarBrandViewModel(viewModelModules, getImageRepository(), nasaImagesFavoriteRepo());
  }

  private ViewModel providesFragmentFavoritesImagesViewModel() {
    return ViewModelModules_ProvidesFragmentFavoritesImagesViewModelFactory.providesFragmentFavoritesImagesViewModel(viewModelModules, nasaImagesFavoriteRepo());
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
      ) {
    return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2).put(FragmentNasaImageOfTheDayViewModel.class, providesSelectYourCarBrandViewModelProvider).put(FragmentFavoritesImagesViewModel.class, providesFragmentFavoritesImagesViewModelProvider).build();
  }

  private ViewModelFactory viewModelFactory() {
    return ViewModelModules_ProvidesViewModelFactoryFactory.providesViewModelFactory(viewModelModules, mapOfClassOfAndProviderOfViewModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam,
      final ViewModelModules viewModelModulesParam) {
    this.providesNasaImageDBProvider = DoubleCheck.provider(new SwitchingProvider<NasaImageDatabase>(singletonC, 2));
    this.providesRoomNameDaoProvider = DoubleCheck.provider(new SwitchingProvider<NasaImageDao>(singletonC, 1));
    this.provideGsonBuilderProvider = DoubleCheck.provider(new SwitchingProvider<Gson>(singletonC, 5));
    this.providesRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit.Builder>(singletonC, 4));
    this.providesCarsNameLogoServiceProvider = DoubleCheck.provider(new SwitchingProvider<Repository>(singletonC, 3));
    this.providesSelectYourCarBrandViewModelProvider = new SwitchingProvider<>(singletonC, 0);
    this.providesFragmentFavoritesImagesViewModelProvider = new SwitchingProvider<>(singletonC, 6);
  }

  @Override
  public void injectNasaPhotoOfTheDayApp(NasaPhotoOfTheDayApp nasaPhotoOfTheDayApp) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private ViewModelModules viewModelModules;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder nasaImageRoomModule(NasaImageRoomModule nasaImageRoomModule) {
      Preconditions.checkNotNull(nasaImageRoomModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder retrofitModule(RetrofitModule retrofitModule) {
      Preconditions.checkNotNull(retrofitModule);
      return this;
    }

    public Builder viewModelModules(ViewModelModules viewModelModules) {
      this.viewModelModules = Preconditions.checkNotNull(viewModelModules);
      return this;
    }

    public NasaPhotoOfTheDayApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (viewModelModules == null) {
        this.viewModelModules = new ViewModelModules();
      }
      return new DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC(applicationContextModule, viewModelModules);
    }
  }

  private static final class ActivityRetainedCBuilder implements NasaPhotoOfTheDayApp_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(
        DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public NasaPhotoOfTheDayApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements NasaPhotoOfTheDayApp_HiltComponents.ActivityC.Builder {
    private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public NasaPhotoOfTheDayApp_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements NasaPhotoOfTheDayApp_HiltComponents.FragmentC.Builder {
    private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public NasaPhotoOfTheDayApp_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements NasaPhotoOfTheDayApp_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(
        DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public NasaPhotoOfTheDayApp_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements NasaPhotoOfTheDayApp_HiltComponents.ViewC.Builder {
    private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public NasaPhotoOfTheDayApp_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements NasaPhotoOfTheDayApp_HiltComponents.ViewModelC.Builder {
    private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public NasaPhotoOfTheDayApp_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements NasaPhotoOfTheDayApp_HiltComponents.ServiceC.Builder {
    private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public NasaPhotoOfTheDayApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends NasaPhotoOfTheDayApp_HiltComponents.ViewWithFragmentC {
    private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends NasaPhotoOfTheDayApp_HiltComponents.FragmentC {
    private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectNasaImageDetailFragment(NasaImageDetailFragment nasaImageDetailFragment) {
      injectNasaImageDetailFragment2(nasaImageDetailFragment);
    }

    @Override
    public void injectNasaImageListingFragment(NasaImageListingFragment nasaImageListingFragment) {
      injectNasaImageListingFragment2(nasaImageListingFragment);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    private NasaImageDetailFragment injectNasaImageDetailFragment2(
        NasaImageDetailFragment instance) {
      NasaImageDetailFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactory());
      return instance;
    }

    private NasaImageListingFragment injectNasaImageListingFragment2(
        NasaImageListingFragment instance) {
      NasaImageListingFragment_MembersInjector.injectViewModelFactory(instance, singletonC.viewModelFactory());
      NasaImageListingFragment_MembersInjector.injectNavigator(instance, activityCImpl.appNavigatorImpl());
      NasaImageListingFragment_MembersInjector.injectDao(instance, singletonC.providesRoomNameDaoProvider.get());
      return instance;
    }
  }

  private static final class ViewCImpl extends NasaPhotoOfTheDayApp_HiltComponents.ViewC {
    private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends NasaPhotoOfTheDayApp_HiltComponents.ActivityC {
    private final Activity activity;

    private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private Provider<FragmentActivity> provideFragmentActivityProvider;

    private ActivityCImpl(DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activity = activityParam;
      initialize(activityParam);

    }

    private FragmentActivity fragmentActivity() {
      return ActivityModule_ProvideFragmentActivityFactory.provideFragmentActivity(activity);
    }

    private AppNavigatorImpl appNavigatorImpl() {
      return new AppNavigatorImpl(provideFragmentActivityProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final Activity activityParam) {
      this.provideFragmentActivityProvider = SingleCheck.provider(new SwitchingProvider<FragmentActivity>(singletonC, activityRetainedCImpl, activityCImpl, 0));
    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
      injectMainActivity2(mainActivity);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), Collections.<String>emptySet(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return Collections.<String>emptySet();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    private MainActivity injectMainActivity2(MainActivity instance) {
      MainActivity_MembersInjector.injectNavigator(instance, appNavigatorImpl());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ActivityCImpl activityCImpl;

      private final int id;

      SwitchingProvider(DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.activityCImpl = activityCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // androidx.fragment.app.FragmentActivity 
          return (T) activityCImpl.fragmentActivity();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ViewModelCImpl extends NasaPhotoOfTheDayApp_HiltComponents.ViewModelC {
    private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private ViewModelCImpl(DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return Collections.<String, Provider<ViewModel>>emptyMap();
    }
  }

  private static final class ActivityRetainedCImpl extends NasaPhotoOfTheDayApp_HiltComponents.ActivityRetainedC {
    private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends NasaPhotoOfTheDayApp_HiltComponents.ServiceC {
    private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerNasaPhotoOfTheDayApp_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // java.util.Map<java.lang.Class<? extends androidx.lifecycle.ViewModel>,javax.inject.Provider<androidx.lifecycle.ViewModel>> com.acho.app.sellcar.di.ViewModelModules#providesSelectYourCarBrandViewModel 
        return (T) singletonC.providesSelectYourCarBrandViewModel();

        case 1: // com.gs.nasaphotooftheday.home.room.NasaImageDao 
        return (T) singletonC.nasaImageDao();

        case 2: // com.gs.nasaphotooftheday.home.room.NasaImageDatabase 
        return (T) singletonC.nasaImageDatabase();

        case 3: // com.gs.nasaphotooftheday.home.repository.Repository 
        return (T) singletonC.repository();

        case 4: // retrofit2.Retrofit.Builder 
        return (T) singletonC.retrofitBuilder();

        case 5: // com.google.gson.Gson 
        return (T) RetrofitModule_ProvideGsonBuilderFactory.provideGsonBuilder();

        case 6: // java.util.Map<java.lang.Class<? extends androidx.lifecycle.ViewModel>,javax.inject.Provider<androidx.lifecycle.ViewModel>> com.acho.app.sellcar.di.ViewModelModules#providesFragmentFavoritesImagesViewModel 
        return (T) singletonC.providesFragmentFavoritesImagesViewModel();

        default: throw new AssertionError(id);
      }
    }
  }
}
